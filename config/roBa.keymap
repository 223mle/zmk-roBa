#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W         &kp E         &kp R             &kp T                                              &kp Y            &kp U  &lt 5 I    &kp O    &kp P
&mt LEFT_CONTROL A  &kp S         &kp D         &kp F             &kp G            &kp LS(LG(S))      &kp MINUS      &kp H            &kp J  &kp K      &kp L    &kp SQT
&mt LEFT_SHIFT Z    &kp X         &kp C         &kp V             &kp B            &kp COLON          &kp SEMICOLON  &kp N            &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL           &lt 5 ESCAPE  &kp LEFT_ALT  &kp LEFT_COMMAND  &lt 2 ALT_ERASE  &lt 3 SPACE        &kp RETURN     &lt 1 BACKSPACE                             &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans     &trans     &trans                           &kp AMPERSAND      &kp LS(AT_SIGN)  &kp LEFT_BRACE    &kp RIGHT_BRACE    &trans
&trans  &trans  &kp GRAVE  &kp MINUS  &kp EQUAL    &trans      &trans  &kp C_VOLUME_UP    &kp MINUS        &kp LPAR          &kp RPAR           &kp GRAVE
&trans  &trans  &kp PIPE   &kp PLUS   &kp PERCENT  &trans      &trans  &kp C_VOLUME_DOWN  &kp UNDERSCORE   &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp EXCLAMATION
&trans  &trans  &trans     &trans     &trans       &trans      &trans  &trans                                                                   &trans
            >;
        };

        NUM {
            bindings = <
&kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_N4       &kp KP_N5                         &kp KP_N6       &kp KP_N7  &kp KP_N8     &kp KP_N9  &kp KP_N0
&trans     &trans     &trans     &mmv MOVE_DOWN  &mmv MOVE_UP  &trans      &trans  &kp LEFT_ARROW  &kp DOWN   &kp UP_ARROW  &kp RIGHT  &trans
&trans     &trans     &trans     &trans          &trans        &trans      &trans  &mkp MCLK       &mkp LCLK  &mkp RCLK     &trans     &trans
&trans     &trans     &trans     &trans          &trans        &trans      &trans  &trans                                              &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                                  &trans          &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans         &trans          &trans          &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &kp LANG4      &kp LANGUAGE_7  &kp LANGUAGE_9  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans         &trans          &trans                                  &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
